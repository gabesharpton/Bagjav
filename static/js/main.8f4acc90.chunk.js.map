{"version":3,"sources":["Cards.js","App.js","serviceWorker.js","index.js"],"names":["Cards","makeCards","suits","values","suit","value","state","deck","push","className","onClick","event","choseCard","key","shuffle","i","j","length","Math","floor","random","deal","player1","setState","filter","cards","index","player2","player3","player4","sort","a","b","player1Turn","playCard","player2turn","player3turn","player4turn","targetedCard","currentTarget","console","log","eventTarget","target","button","newpCard","filtered","some","card","props","children","currentPlayer","alert","removeCardInPlay","slice","newPlayer2","newPlayer3","newPlayer4","playGame","endSet","setTimeout","endGame","this","id","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f4acc90.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './card.css'\n//import Deck from './components/Deck'\n\nexport default class Cards extends Component{\n    constructor(){\n        super();\n        this.state = {\n            deck: [],\n            player1: [],\n            player2: [],\n            player3: [],\n            player4: [],\n            playCard: [],\n            currentPlayer: 1   \n        }\n        this.makeCards(); \n        this.shuffle();   \n    }\n    makeCards = () => {\n            const suits = ['Hearts', 'Spades', 'Clubs', 'Diamonds']\n            const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King', 'Ace']\n\n                for (let suit in suits) {\n                    for (let value in values) {\n                        this.state.deck.push( <button className = 'cards'\n                            value = {\n                                `${values[value]} of ${suits[suit]}`\n                            }\n                            onClick = {\n                                (event) => this.choseCard(event)\n                            }\n                            key = {\n                                value + suit\n                            }> {`${values[value]} of ${suits[suit]}`} </button>);\n\n                    }\n                }\n                    return this.deck\n    };\n\n        shuffle = () => {\n                const {deck} = this.state;\n                let j = deck.length, i;\n                \n\n                while(j) {\n                    i = Math.floor(Math.random() * j--);\n                    [deck[j], deck[i]] = [deck[i], deck[j]]\n                    // console.log([deck[i], deck[j]])\n                }\n                //this.deal();\n                return this;\n        };\n        deal = () => {\n            if(this.state.player1.length < 1){\n                this.setState({ player1: this.state.deck.filter((cards, index) => {\n                        return index < 13 ? cards : null\n                    })\n                }) \n                this.setState({ player2: this.state.deck.filter((cards, index) => {\n                        return index >= 13 && index < 26 ? cards : null\n                    }) \n                }) \n                this.setState({ player3: this.state.deck.filter((cards, index) => {\n                        return index >= 26 && index < 39 ? cards : null\n                    }) \n                }) \n                this.setState({ player4: this.state.deck.filter((cards, index) => {\n                        return index >= 39 && index <= 52 ? cards : null\n                    }) \n                }) \n            }\n        };\n        sort = () => {\n            \n            //let sorted = (a,b) => a.props.children - b.props.children;\n            this.setState({player1: this.state.player1.sort((a,b) => a.key - b.key)}\n                );\n            this.setState({player2: this.state.player2.sort((a,b) => a.key - b.key)}\n                );\n            this.setState({player3: this.state.player3.sort((a,b) => a.key - b.key)}\n                );\n            this.setState({player4: this.state.player4.sort((a,b) => a.key - b.key)}\n                );\n        };\n                \n    player1Turn = () => {\n        let {playCard} = this.state\n        if(playCard.length === 1)\n                       this.player2turn();\n                       this.player3turn();\n                       this.player4turn()}\n\n                    \n    \n    choseCard = (event) => {\n        //console.log('hello world')\n        //if(event.target && event.target.value){\n            const targetedCard = event.currentTarget\n            console.log(targetedCard)\n            const eventTarget = event.target.value\n            this.setState(({\n                player1,\n            }) => {\n                let button = <button className = 'cards' key = {eventTarget}> {eventTarget} </button>;\n                let newpCard = [];\n                //console.log(event.target.value)\n                if(eventTarget){\n                    newpCard.push(button)\n                        let filtered = player1.filter(cards => {\n                            return newpCard.some(card => {\n                                return card.value !== cards.props.children[1]\n                            })\n                        });\n                    console.log(newpCard)\n                    if (this.state.currentPlayer === 1) {\n                        return {\n                            playCard: newpCard,\n                            player1: [...filtered, player1.length],\n                            currentPlayer: 2\n                        }\n                    }else {\n                        return alert('You already played this set')\n                    }\n            }}\n            )\n            this.removeCardInPlay()\n            //this.player1Turn();\n    //}\n    }\n    removeCardInPlay = () => {\n        let {player1} = this.state\n        if(player1.value === this.state.playCard.value){\n            this.setState({\n                player1: [...player1.slice(1, player1.length)]\n            })\n        }\n    }\n    player2turn = () => {\n        let {\n            player2\n        } = this.state\n        let {\n            playCard\n        } = this.state\n        let filtered = player2.filter(cards => {\n            return playCard.some(card => {\n                return card.props.children[1][0] === cards.props.children[1][0]\n            })\n        });\n        let newPlayer2 = player2.filter(card => {\n            return playCard.some(cards => {\n                return card.props.children[1][0] !== cards.props.children[1][0]\n            })\n        })\n        if (playCard.length >= 1) {\n            this.setState({\n                playCard: [...playCard, ...filtered],\n                player2: [...newPlayer2]\n            })\n        } else return;\n        \n    };\n    player3turn = () => {\n        let {\n            player3\n        } = this.state\n        let {\n            playCard\n        } = this.state\n        let filtered = player3.filter(cards => {\n            return playCard.some(card => {\n                return card.props.children[1][0] === cards.props.children[1][0]\n            })\n        });\n        let newPlayer3 = player3.filter(card => {\n            return playCard.some(cards => {\n                return card.props.children[1][0] !== cards.props.children[1][0]\n            })\n        })\n        this.setState({\n            playCard: [...playCard, ...filtered],\n            player3: [...newPlayer3]\n        })\n    };\n    player4turn = () => {\n        let {\n            player4\n        } = this.state\n        let {\n            playCard\n        } = this.state\n        let filtered = player4.filter(cards => {\n            return playCard.some(card => {\n                return card.props.children[1][0] === cards.props.children[1][0]\n            })\n        });\n        let newPlayer4 = player4.filter(card => {\n            return playCard.some(cards => {\n                return card.props.children[1][0] !== cards.props.children[1][0]\n            })\n        })\n        this.setState({\n            playCard: [...playCard, ...filtered],\n            player4: [...newPlayer4],\n            currentPlayer: 5\n        })\n    };\n    playGame = () => {\n\n                if(this.state.playCard.length < 4){\n                    this.choseCard()\n                    this.player2turn()\n                    this.player3turn()\n                    this.player4turn()\n            }\n        }\n\n    endSet = () => {\n        setTimeout(()=>{\n        if(this.state.playCard.length === 4|| this.state.currentPlayer === 5){\n            console.log(\"set Over\")\n            this.setState({\n                playCard: [],\n                currentPlayer: 1\n            })}else{\n                console.log('still playing')\n            }\n        },500)\n    }\n    endGame = () => {\n        let {player1} = this.state\n        let {playCard} = this.state\n        if(player1.length === 0 && playCard.length === 1){\n            setTimeout(()=>{\n                alert('Player 1 wins this hand')\n            }, 500\n            \n            )}\n    }\n    \n    \nrender() {\n    this.endSet();\n    this.endGame();\n    //console.log(this.state)\n    return (<div>\n            \n            {/* <Deck deck={this.props.deck}/> */}\n        \n            <p id='player1'>{this.state.player1}</p>\n            <p id='player2'>{this.state.player2}</p>\n            <p id='player3'>{this.state.player3}</p>\n            <p id='player4'>{this.state.player4}</p>\n            <button onClick={() => this.deal()} >Deal</button>\n            <button onClick={() => this.sort()} >sort</button>\n            <button onClick={() => this.player2turn()} >Player 2</button>\n            <button onClick={() => this.player3turn()} >Player 3</button>\n            <button onClick={() => this.player4turn()} >Player 4</button>\n            \n            <p id='playCard'>Card in play:\n            {this.state.playCard}</p>\n            </div>)\n}\n}\n\n\n\n\n\n\n\n\n   // --------------------------------------------------------------\n\n\n\n        // this.setState({playCard: this.state.player2.filter((card,index ) => {\n        //     return index === this.state.playCard[0].props.children ? card : null\n        // })})\n\n\n                            //{this.setState({ player1: this.state.player1.filter(card => card.key !== i)})\n                //i.preventDefault()\n                //takes i from for loop to determin index}\n                            // for(let i = 0; i < player1.length; i++)\n                    // {\n                            // const index = i;\n                            // console.log(i)\n         \n                            // choseCard = (i) => {\n            //     //let {player1} = this.state\n            //     //takes i from for loop to determin index\n            //     i.preventDefault()\n            //     for(let i = 0; i < this.state.player1.length; i++){\n            //     this.setState(({playCard, player1}) => {\n            //             console.log(i)\n            //             if(playCard.length < 4){\n            //                 return {\n            //                     playCard: [...playCard, ...player1.slice(i, 1)],\n            //                     player1: [...player1.slice(0, i), ...player1.slice(i, player1.length)]\n                                \n            //                 };\n                        \n            //             //return index = i\n            //         }\n            //         else{\n            //             return}\n            //         }\n            //             //console.log(i)\n                        \n            //     )};\n                    \n            //     }","import React, {Component} from 'react';\nimport './App.css';\n//import Intro from './Intro'\n//import Deck from './components/Deck'\nimport Cards from './Cards'\n//import Card from './components/Card'\n//import PlayGame from './components/playGame'\n\n\nclass App extends Component {\n  \n  render(){\n  return (\n    <div className=\"App\">\n      \n      {/* <Route path=\"\" render={Intro}/> */}\n     <Cards/>\n     {/* <Card /> */}\n     {/* <Deck /> */}\n     {/* <PlayGame /> */}\n   \n    </div>\n  );\n}\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from \"react-router-dom\"\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<Router><App /></Router>\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}