{"ast":null,"code":"export default class Cards {\n  constructor() {\n    this.deck = [];\n    const suits = ['Hearts', 'Spades', 'Clubs', 'Diamonds'];\n    const values = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King'];\n\n    for (let suit in suits) {\n      for (let value in values) {\n        this.deck.push(\"\".concat(values[value], \" of \").concat(suits[suit]));\n      }\n    }\n  }\n\n}\nconst deck1 = new Cards();\nconsole.log(deck1.deck);\n\nconst shuffle = () => {\n  const deck = this.deck;\n  let j = deck.length,\n      i;\n\n  while (j) {\n    i = Math.floor(Math.random() * j--);\n  }\n\n  return this;\n};\n\nshuffle();","map":{"version":3,"sources":["/Users/3bag/Code/Bagjav/bagjav/src/Card.js"],"names":["Cards","constructor","deck","suits","values","suit","value","push","deck1","console","log","shuffle","j","length","i","Math","floor","random"],"mappings":"AACA,eAAe,MAAMA,KAAN,CAAY;AACvBC,EAAAA,WAAW,GAAE;AACT,SAAKC,IAAL,GAAY,EAAZ;AAEA,UAAMC,KAAK,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,EAA8B,UAA9B,CAAd;AACA,UAAMC,MAAM,GAAG,CAAC,KAAD,EAAQ,GAAR,EAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,GAAjC,EAAsC,GAAtC,EAA2C,GAA3C,EAAgD,IAAhD,EAAsD,MAAtD,EAA8D,OAA9D,EAAuE,MAAvE,CAAf;;AAEA,SAAK,IAAIC,IAAT,IAAiBF,KAAjB,EAAuB;AACnB,WAAK,IAAIG,KAAT,IAAkBF,MAAlB,EAA0B;AACtB,aAAKF,IAAL,CAAUK,IAAV,WAAkBH,MAAM,CAACE,KAAD,CAAxB,iBAAsCH,KAAK,CAACE,IAAD,CAA3C;AACH;AACJ;AACJ;;AAZsB;AAe3B,MAAMG,KAAK,GAAG,IAAIR,KAAJ,EAAd;AACAS,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACN,IAAlB;;AAEA,MAAMS,OAAO,GAAG,MAAM;AAAA,QACXT,IADW,GACH,IADG,CACXA,IADW;AAElB,MAAIU,CAAC,GAAGV,IAAI,CAACW,MAAb;AAAA,MAAqBC,CAArB;;AAEA,SAAMF,CAAN,EAAS;AACLE,IAAAA,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,CAAC,EAA5B,CAAJ;AACH;;AACD,SAAO,IAAP;AACH,CARD;;AASAD,OAAO","sourcesContent":["\nexport default class Cards {\n    constructor(){\n        this.deck = [];\n\n        const suits = ['Hearts', 'Spades', 'Clubs', 'Diamonds']\n        const values = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']\n\n        for (let suit in suits){\n            for (let value in values) {\n                this.deck.push(`${values[value]} of ${suits[suit]}`);\n            }\n        }\n    }\n}\n\nconst deck1 = new Cards();\nconsole.log(deck1.deck)\n\nconst shuffle = () => {\n    const {deck} = this;\n    let j = deck.length, i;\n\n    while(j) {\n        i = Math.floor(Math.random() * j--);\n    }\n    return this;\n}\nshuffle()"]},"metadata":{},"sourceType":"module"}