{"ast":null,"code":"export default class Cards {\n  constructor() {\n    this.deck = [];\n    this.makeCards();\n    this.shuffle(); // this.player = {\n    //     player1: card,\n    //     player2: card,\n    //     player3: card,\n    //     player4: card\n    // }\n  }\n\n  makeCards() {\n    this.deck = [];\n    const suits = ['Hearts', 'Spades', 'Clubs', 'Diamonds'];\n    const values = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King'];\n\n    for (let suit in suits) {\n      for (let value in values) {\n        this.deck.push(\"\".concat(values[value], \" of \").concat(suits[suit]));\n      }\n    }\n\n    return this.deck;\n  } // shuffle(){\n  //     for (let s = 0; s < 1000; s++){\n  //         let loc1 = Math.floor(Math.random() * this.deck.length);\n  //         let loc2 = Math.floor(Math.random() * this.deck.length);\n  //         this.deck[loc1] = this.deck[loc2]\n  //         this.deck[loc2] = this.deck[loc1]\n  //     }\n  // }\n  // splitDeck(){\n  //     this.deck.splice()\n  // }\n\n\n  shuffle() {\n    const deck = this.deck;\n    let j = deck.length,\n        i;\n    console.log(j);\n\n    while (j) {\n      i = Math.floor(Math.random() * j--); // [deck[j], deck[i]] = [deck[i], deck[j]]\n\n      console.log([deck[i], deck[j]]);\n    }\n\n    return this;\n  } //     deal(){\n  //         return this.deck.pop();\n  //     }\n  // }\n  // function deals(){\n  // let cardsInHand = 13;\n  // let player = [\"'player1': cardsInHand, 'player2': cardsInHand, 'player3', 'player4'\"];\n  // for (let player = 0; player < 4; player++){\n  //   console.log(player)\n  //   for(let cardsInHand = 0; cardsInHand < deck1.length; cardsInHand++){\n  //     console.log(deck1[0])\n  //     }\n  // }\n  // for(cardsInHand in player){\n  //     deck1.push(cardsInHand[player])\n  //     console.log(player[0])\n  // }\n  //}\n  // console.log(deck1)\n  // deals()\n\n\n}","map":{"version":3,"sources":["/Users/3bag/Code/Bagjav/bagjav/src/Card.js"],"names":["Cards","constructor","deck","makeCards","shuffle","suits","values","suit","value","push","j","length","i","console","log","Math","floor","random"],"mappings":"AACA,eAAe,MAAMA,KAAN,CAAY;AACvBC,EAAAA,WAAW,GAAE;AACT,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,SAAL;AACA,SAAKC,OAAL,GAHS,CAIT;AACA;AACA;AACA;AACA;AACA;AACH;;AACDD,EAAAA,SAAS,GAAE;AACP,SAAKD,IAAL,GAAY,EAAZ;AACA,UAAMG,KAAK,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,EAA8B,UAA9B,CAAd;AACA,UAAMC,MAAM,GAAG,CAAC,KAAD,EAAQ,GAAR,EAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,GAAjC,EAAsC,GAAtC,EAA2C,GAA3C,EAAgD,IAAhD,EAAsD,MAAtD,EAA8D,OAA9D,EAAuE,MAAvE,CAAf;;AAGA,SAAK,IAAIC,IAAT,IAAiBF,KAAjB,EAAuB;AACnB,WAAK,IAAIG,KAAT,IAAkBF,MAAlB,EAA0B;AACtB,aAAKJ,IAAL,CAAUO,IAAV,WAAkBH,MAAM,CAACE,KAAD,CAAxB,iBAAsCH,KAAK,CAACE,IAAD,CAA3C;AACH;AACJ;;AACD,WAAO,KAAKL,IAAZ;AACH,GAxBsB,CA0BvB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AACIE,EAAAA,OAAO,GAAG;AAAA,UACCF,IADD,GACS,IADT,CACCA,IADD;AAEN,QAAIQ,CAAC,GAAGR,IAAI,CAACS,MAAb;AAAA,QAAqBC,CAArB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,CAAZ;;AAEA,WAAMA,CAAN,EAAS;AACLE,MAAAA,CAAC,GAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,CAAC,EAA5B,CAAJ,CADK,CAEL;;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,CAACZ,IAAI,CAACU,CAAD,CAAL,EAAUV,IAAI,CAACQ,CAAD,CAAd,CAAZ;AACH;;AACD,WAAO,IAAP;AACH,GAlDkB,CAmDvB;AACA;AACA;AAEA;AAGA;AASI;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACQ;AAIR;AACA;;;AAtFmB","sourcesContent":["\nexport default class Cards {\n    constructor(){\n        this.deck = [];\n        this.makeCards();\n        this.shuffle();\n        // this.player = {\n        //     player1: card,\n        //     player2: card,\n        //     player3: card,\n        //     player4: card\n        // }\n    }\n    makeCards(){\n        this.deck = [];\n        const suits = ['Hearts', 'Spades', 'Clubs', 'Diamonds']\n        const values = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']\n\n        \n        for (let suit in suits){\n            for (let value in values) {\n                this.deck.push(`${values[value]} of ${suits[suit]}`);\n            }\n        }\n        return this.deck\n    }\n\n    // shuffle(){\n    //     for (let s = 0; s < 1000; s++){\n    //         let loc1 = Math.floor(Math.random() * this.deck.length);\n    //         let loc2 = Math.floor(Math.random() * this.deck.length);\n\n    //         this.deck[loc1] = this.deck[loc2]\n    //         this.deck[loc2] = this.deck[loc1]\n    //     }\n    // }\n    // splitDeck(){\n\n    //     this.deck.splice()\n    // }\n        shuffle() {\n            const {deck} = this;\n            let j = deck.length, i;\n            console.log(j)\n\n            while(j) {\n                i = Math.floor(Math.random() * j--);\n                // [deck[j], deck[i]] = [deck[i], deck[j]]\n                console.log([deck[i], deck[j]])\n            }\n            return this;\n        }\n    //     deal(){\n    //         return this.deck.pop();\n    //     }\n\n    // }\n  \n\n    // function deals(){\n\n                \n\n\n\n\n\n\n        // let cardsInHand = 13;\n        // let player = [\"'player1': cardsInHand, 'player2': cardsInHand, 'player3', 'player4'\"];\n\n        // for (let player = 0; player < 4; player++){\n        //   console.log(player)\n        //   for(let cardsInHand = 0; cardsInHand < deck1.length; cardsInHand++){\n        //     console.log(deck1[0])\n        //     }\n        // }\n\n        // for(cardsInHand in player){\n        //     deck1.push(cardsInHand[player])\n        //     console.log(player[0])\n        // }\n                //}\n\n                \n                \n        // console.log(deck1)\n        // deals()\n}"]},"metadata":{},"sourceType":"module"}