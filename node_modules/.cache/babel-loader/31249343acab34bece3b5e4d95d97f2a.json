{"ast":null,"code":"class playGame {\n  constructor() {\n    this.startGame = () => {\n      // let choice = prompt(\"Would you like to start the game?\")\n      // if(choice === 'yes'){\n      // this.choseCard()\n      // console.log(this.playCard)\n      // this.state.playCard = this.state.player2.filter(() => this.state.playCard)\n      // console.log(this.state.children)\n      return;\n    };\n\n    this.choseCard = () => {\n      this.setState({\n        playCard: this.state.player1.shift()\n      }); //I need to filter player2 array to find props.children[0]\n      //if it has that then push to this.state.playCard\n      //Player 3 sorts through array to find card etc....\n    };\n\n    this.player2turn = () => {\n      // this.setState({playCard: this.state.player2.filter((card,index ) => {\n      //     return index === this.state.playCard[0].props.children ? card : null\n      // })})\n      this.setState(prevState => ({\n        playCard: this.state.player2.shift().prevState\n      }));\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/3bag/Code/Bagjav/bagjav/src/playGame.js"],"names":["playGame","startGame","choseCard","setState","playCard","state","player1","shift","player2turn","prevState","player2"],"mappings":"AACA,MAAMA,QAAN,CAAc;AAAA;AAAA,SACdC,SADc,GACF,MAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KATa;;AAAA,SAUdC,SAVc,GAUF,MAAM;AACd,WAAKC,QAAL,CAAc;AAACC,QAAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,KAAnB;AAAX,OAAd,EADc,CAEd;AACA;AACA;AACH,KAfa;;AAAA,SAgBdC,WAhBc,GAgBA,MAAM;AAChB;AACA;AACA;AACA,WAAKL,QAAL,CAAcM,SAAS,KAAK;AAACL,QAAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWK,OAAX,CAAmBH,KAAnB,GAA2BE;AAAtC,OAAL,CAAvB;AACH,KArBa;AAAA;;AAAA","sourcesContent":["\nclass playGame{\nstartGame = () => {\n    // let choice = prompt(\"Would you like to start the game?\")\n    // if(choice === 'yes'){\n    // this.choseCard()\n    // console.log(this.playCard)\n    // this.state.playCard = this.state.player2.filter(() => this.state.playCard)\n    // console.log(this.state.children)\n    return;\n}\nchoseCard = () => {\n    this.setState({playCard: this.state.player1.shift()})\n    //I need to filter player2 array to find props.children[0]\n    //if it has that then push to this.state.playCard\n    //Player 3 sorts through array to find card etc....\n}\nplayer2turn = () => {\n    // this.setState({playCard: this.state.player2.filter((card,index ) => {\n    //     return index === this.state.playCard[0].props.children ? card : null\n    // })})\n    this.setState(prevState => ({playCard: this.state.player2.shift().prevState}))\n}\n}"]},"metadata":{},"sourceType":"module"}