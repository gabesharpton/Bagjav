{"ast":null,"code":"var _jsxFileName = \"/Users/3bag/Code/Bagjav/bagjav/src/Card.js\";\nimport React, { Component } from 'react';\nimport './card.css';\nexport default class Cards extends Component {\n  constructor(props) {\n    super(props);\n\n    this.makeCards = () => {\n      this.deck = [];\n      const suits = ['Hearts', 'Spades', 'Clubs', 'Diamonds'];\n      const values = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King'];\n\n      for (let suit in suits) {\n        for (let value in values) {\n          this.state.deck.push(React.createElement(\"span\", {\n            className: \"cards\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 29\n            },\n            __self: this\n          }, values[value], \" of \", suits[suit]));\n        }\n      }\n\n      return this.deck;\n    };\n\n    this.shuffle = () => {\n      const deck = this.state.deck;\n      let j = deck.length,\n          i;\n\n      while (j) {\n        i = Math.floor(Math.random() * j--);\n        var _ref = [deck[i], deck[j]];\n        deck[j] = _ref[0];\n        deck[i] = _ref[1];\n      }\n\n      return this;\n    };\n\n    this.deal = () => {\n      this.state.player1 = this.state.deck.splice(0, 13);\n      this.state.player2 = this.state.deck.splice(0, 13);\n      this.state.player3 = this.state.deck.splice(0, 13);\n      this.state.player4 = this.state.deck.splice(0, 13);\n      return this.state;\n    };\n\n    this.startGame = () => {\n      // let choice = prompt(\"Would you like to start the game?\")\n      // if(choice === 'yes'){\n      this.choseCard();\n      console.log(this.playCard);\n      this.playCard = this.state.player2.filter(() => this.state.playCard.value);\n      return;\n    };\n\n    this.state = {\n      deck: [],\n      player1: [],\n      player2: [],\n      player3: [],\n      player4: [],\n      playCard: []\n    };\n    this.makeCards();\n    this.shuffle();\n    this.deal();\n    this.startGame();\n  }\n\n  choseCard() {\n    this.playCard = this.state.player1.splice(0, 1);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      id: \"player1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, this.state.player1), React.createElement(\"p\", {\n      id: \"player2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.state.player2), React.createElement(\"p\", {\n      id: \"player3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, this.state.player3), React.createElement(\"p\", {\n      id: \"player4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.state.player4));\n  }\n\n} // --------------------------------------------------------------\n// this.state.deck.fill(this.state.player1)\n// while((i = deck.shift() !== undefined){\n// })\n// let {deck} = this.state\n// for( let i = 0; i <= 13; i++){\n//     if(deck[i] !== 0){\n//         let card = deck[i]\n//         console.log(card)\n//          deck.pop()}\n//  this.state.deck.pop(this.state.player2)\n// function deals(){\n// let cardsInHand = 13;\n// let player = [\"'player1': cardsInHand, 'player2': cardsInHand, 'player3', 'player4'\"];\n// for (let player = 0; player < 4; player++){\n//   console.log(player)\n//   for(let cardsInHand = 0; cardsInHand < deck1.length; cardsInHand++){\n//     console.log(deck1[0])\n//     }\n// }\n// for(cardsInHand in player){\n//     deck1.push(cardsInHand[player])\n//     console.log(player[0])\n// }\n//}\n// console.log(deck1)\n// deals()","map":{"version":3,"sources":["/Users/3bag/Code/Bagjav/bagjav/src/Card.js"],"names":["React","Component","Cards","constructor","props","makeCards","deck","suits","values","suit","value","state","push","shuffle","j","length","i","Math","floor","random","deal","player1","splice","player2","player3","player4","startGame","choseCard","console","log","playCard","filter","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './card.css'\n\nexport default class Cards extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            deck: [],\n            player1: [],\n            player2: [],\n            player3: [],\n            player4: [],\n            playCard: []\n            \n        }\n        this.makeCards();\n        this.shuffle();\n        this.deal();\n        this.startGame();\n    }\n    makeCards = () => {\n        this.deck = [];\n        const suits = ['Hearts', 'Spades', 'Clubs', 'Diamonds']\n        const values = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']\n\n        \n        for (let suit in suits){\n            for (let value in values) {\n                this.state.deck.push(<span className='cards' >{values[value]} of {suits[suit]}</span>);\n            }\n        }\n        return this.deck\n    }\n\n    shuffle = () => {\n            const {deck} = this.state;\n            let j = deck.length, i;\n            \n\n            while(j) {\n                i = Math.floor(Math.random() * j--);\n                [deck[j], deck[i]] = [deck[i], deck[j]]\n                // console.log([deck[i], deck[j]])\n            }\n            return this;\n    }\n        deal = () => {\n\n            this.state.player1 = this.state.deck.splice(0, 13)\n            this.state.player2 = this.state.deck.splice(0, 13)\n            this.state.player3 = this.state.deck.splice(0, 13)\n            this.state.player4 = this.state.deck.splice(0, 13)\n\n            return this.state;\n        \n    }\n\n    startGame = () => {\n        // let choice = prompt(\"Would you like to start the game?\")\n        // if(choice === 'yes'){\n        this.choseCard()\n        console.log(this.playCard)\n        this.playCard = this.state.player2.filter(() => this.state.playCard.value)\n        \n        return;\n    }\n    choseCard(){\n        this.playCard = this.state.player1.splice(0, 1)\n    }\n\n        render(){\n            return(\n                <div>\n                    {/* <p>{this.state.deck}</p> */}\n                <p id='player1'>{this.state.player1}</p>\n                <p id='player2'>{this.state.player2}</p>\n                <p id='player3'>{this.state.player3}</p>\n                <p id='player4'>{this.state.player4}</p>\n                </div>\n            )\n        }\n    }\n\n\n\n\n\n\n\n\n   // --------------------------------------------------------------\n\n                \n            // this.state.deck.fill(this.state.player1)\n           \n                // while((i = deck.shift() !== undefined){\n\n                // })\n\n            // let {deck} = this.state\n            // for( let i = 0; i <= 13; i++){\n            //     if(deck[i] !== 0){\n            //         let card = deck[i]\n            //         console.log(card)\n            //          deck.pop()}\n                //  this.state.deck.pop(this.state.player2)\n           \n           \n             \n            \n    // function deals(){\n\n                \n\n\n\n\n\n\n        // let cardsInHand = 13;\n        // let player = [\"'player1': cardsInHand, 'player2': cardsInHand, 'player3', 'player4'\"];\n\n        // for (let player = 0; player < 4; player++){\n        //   console.log(player)\n        //   for(let cardsInHand = 0; cardsInHand < deck1.length; cardsInHand++){\n        //     console.log(deck1[0])\n        //     }\n        // }\n\n        // for(cardsInHand in player){\n        //     deck1.push(cardsInHand[player])\n        //     console.log(player[0])\n        // }\n                //}\n\n                \n                \n        // console.log(deck1)\n        // deals()\n"]},"metadata":{},"sourceType":"module"}