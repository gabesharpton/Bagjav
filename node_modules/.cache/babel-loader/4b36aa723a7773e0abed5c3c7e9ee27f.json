{"ast":null,"code":"import React, { Component } from 'react';\nexport default class Cards extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: [],\n      cards: []\n    };\n    this.makeCards();\n    this.shuffle(), this.deal();\n  }\n\n  makeCards() {\n    this.deck = [];\n    const suits = ['Hearts', 'Spades', 'Clubs', 'Diamonds'];\n    const values = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King'];\n\n    for (let suit in suits) {\n      for (let value in values) {\n        this.deck.push(\"\".concat(values[value], \" of \").concat(suits[suit]));\n      }\n    }\n\n    return this.deck;\n  }\n\n  shuffle() {\n    const deck = this.deck;\n    let j = deck.length,\n        i;\n\n    while (j) {\n      i = Math.floor(Math.random() * j--);\n      var _ref = [deck[i], deck[j]];\n      deck[j] = _ref[0];\n      deck[i] = _ref[1];\n    }\n\n    return this;\n  }\n\n  deal() {\n    let player = {\n      player1: {\n        cards: []\n      },\n      player2: [],\n      player3: [],\n      player4: []\n    }; // for(let players in this.player){\n    // for(let c = 0; c <= 13; c++){\n\n    this.deck.copyWithin(player.player1.cards);\n    player.player1.cards.fill(this.deck);\n    this.deck.copyWithin(player.player1.cards);\n    this.deck.pop(player.player1.cards); // }\n\n    console.log(player);\n    return player;\n  } // }\n  // function deals(){\n  // let cardsInHand = 13;\n  // let player = [\"'player1': cardsInHand, 'player2': cardsInHand, 'player3', 'player4'\"];\n  // for (let player = 0; player < 4; player++){\n  //   console.log(player)\n  //   for(let cardsInHand = 0; cardsInHand < deck1.length; cardsInHand++){\n  //     console.log(deck1[0])\n  //     }\n  // }\n  // for(cardsInHand in player){\n  //     deck1.push(cardsInHand[player])\n  //     console.log(player[0])\n  // }\n  //}\n  // console.log(deck1)\n  // deals()\n\n\n}","map":{"version":3,"sources":["/Users/3bag/Code/Bagjav/bagjav/src/Card.js"],"names":["React","Component","Cards","constructor","props","state","deck","cards","makeCards","shuffle","deal","suits","values","suit","value","push","j","length","i","Math","floor","random","player","player1","player2","player3","player4","copyWithin","fill","pop","console","log"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,eAAe,MAAMC,KAAN,SAAoBD,SAApB,CAA6B;AACxCE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,EADG;AAETC,MAAAA,KAAK,EAAE;AAFE,KAAb;AAIA,SAAKC,SAAL;AACA,SAAKC,OAAL,IACA,KAAKC,IAAL,EADA;AAEH;;AACDF,EAAAA,SAAS,GAAE;AACP,SAAKF,IAAL,GAAY,EAAZ;AACA,UAAMK,KAAK,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,EAA8B,UAA9B,CAAd;AACA,UAAMC,MAAM,GAAG,CAAC,KAAD,EAAQ,GAAR,EAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,GAAjC,EAAsC,GAAtC,EAA2C,GAA3C,EAAgD,IAAhD,EAAsD,MAAtD,EAA8D,OAA9D,EAAuE,MAAvE,CAAf;;AAGA,SAAK,IAAIC,IAAT,IAAiBF,KAAjB,EAAuB;AACnB,WAAK,IAAIG,KAAT,IAAkBF,MAAlB,EAA0B;AACtB,aAAKN,IAAL,CAAUS,IAAV,WAAkBH,MAAM,CAACE,KAAD,CAAxB,iBAAsCH,KAAK,CAACE,IAAD,CAA3C;AACH;AACJ;;AACD,WAAO,KAAKP,IAAZ;AACH;;AAEGG,EAAAA,OAAO,GAAG;AAAA,UACCH,IADD,GACS,IADT,CACCA,IADD;AAEN,QAAIU,CAAC,GAAGV,IAAI,CAACW,MAAb;AAAA,QAAqBC,CAArB;;AAGA,WAAMF,CAAN,EAAS;AACLE,MAAAA,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,CAAC,EAA5B,CAAJ;AADK,iBAEgB,CAACV,IAAI,CAACY,CAAD,CAAL,EAAUZ,IAAI,CAACU,CAAD,CAAd,CAFhB;AAEJV,MAAAA,IAAI,CAACU,CAAD,CAFA;AAEKV,MAAAA,IAAI,CAACY,CAAD,CAFT;AAIR;;AACD,WAAO,IAAP;AACH;;AACDR,EAAAA,IAAI,GAAE;AACF,QAAIY,MAAM,GAAG;AACTC,MAAAA,OAAO,EAAE;AAAChB,QAAAA,KAAK,EAAE;AAAR,OADA;AAETiB,MAAAA,OAAO,EAAE,EAFA;AAGTC,MAAAA,OAAO,EAAE,EAHA;AAITC,MAAAA,OAAO,EAAE;AAJA,KAAb,CADE,CAOF;AACI;;AACI,SAAKpB,IAAL,CAAUqB,UAAV,CAAqBL,MAAM,CAACC,OAAP,CAAehB,KAApC;AACAe,IAAAA,MAAM,CAACC,OAAP,CAAehB,KAAf,CAAqBqB,IAArB,CAA0B,KAAKtB,IAA/B;AACA,SAAKA,IAAL,CAAUqB,UAAV,CAAqBL,MAAM,CAACC,OAAP,CAAehB,KAApC;AACA,SAAKD,IAAL,CAAUuB,GAAV,CAAcP,MAAM,CAACC,OAAP,CAAehB,KAA7B,EAZN,CAaE;;AACAuB,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACA,WAAOA,MAAP;AACH,GArD+B,CAuDhC;AAER;AASI;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACQ;AAIR;AACA;;;AArFoC","sourcesContent":["import React, {Component} from 'react';\n\nexport default class Cards extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            deck: [],\n            cards: []\n        }\n        this.makeCards()\n        this.shuffle(),\n        this.deal()\n    }\n    makeCards(){\n        this.deck = [];\n        const suits = ['Hearts', 'Spades', 'Clubs', 'Diamonds']\n        const values = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']\n\n        \n        for (let suit in suits){\n            for (let value in values) {\n                this.deck.push(`${values[value]} of ${suits[suit]}`);\n            }\n        }\n        return this.deck\n    }\n\n        shuffle() {\n            const {deck} = this;\n            let j = deck.length, i;\n            \n\n            while(j) {\n                i = Math.floor(Math.random() * j--);\n                [deck[j], deck[i]] = [deck[i], deck[j]]\n                // console.log([deck[i], deck[j]])\n            }\n            return this;\n        }\n        deal(){\n            let player = {\n                player1: {cards: []},\n                player2: [],\n                player3: [],\n                player4: []\n            }\n            // for(let players in this.player){\n                // for(let c = 0; c <= 13; c++){\n                    this.deck.copyWithin(player.player1.cards)\n                    player.player1.cards.fill(this.deck)\n                    this.deck.copyWithin(player.player1.cards)\n                    this.deck.pop(player.player1.cards)\n                // }\n                console.log(player)\n                return player;\n            }\n            \n            // }\n            \n    // function deals(){\n\n                \n\n\n\n\n\n\n        // let cardsInHand = 13;\n        // let player = [\"'player1': cardsInHand, 'player2': cardsInHand, 'player3', 'player4'\"];\n\n        // for (let player = 0; player < 4; player++){\n        //   console.log(player)\n        //   for(let cardsInHand = 0; cardsInHand < deck1.length; cardsInHand++){\n        //     console.log(deck1[0])\n        //     }\n        // }\n\n        // for(cardsInHand in player){\n        //     deck1.push(cardsInHand[player])\n        //     console.log(player[0])\n        // }\n                //}\n\n                \n                \n        // console.log(deck1)\n        // deals()\n}"]},"metadata":{},"sourceType":"module"}