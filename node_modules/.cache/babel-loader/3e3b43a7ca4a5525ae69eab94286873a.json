{"ast":null,"code":"let startGame = () => {\n  // let choice = prompt(\"Would you like to start the game?\")\n  // if(choice === 'yes'){\n  // this.choseCard()\n  // console.log(this.playCard)\n  // this.state.playCard = this.state.player2.filter(() => this.state.playCard)\n  // console.log(this.state.children)\n  return;\n};\n\nlet choseCard = () => {\n  this.setState({\n    playCard: this.state.player1.shift()\n  }); //I need to filter player2 array to find props.children[0]\n  //if it has that then push to this.state.playCard\n  //Player 3 sorts through array to find card etc....\n};\n\nlet player2turn = () => {\n  // this.setState({playCard: this.state.player2.filter((card,index ) => {\n  //     return index === this.state.playCard[0].props.children ? card : null\n  // })})\n  this.setState(prevState => ({\n    playCard: this.state.player2.shift().prevState\n  }));\n};","map":{"version":3,"sources":["/Users/3bag/Code/Bagjav/bagjav/src/playGame.js"],"names":["startGame","choseCard","setState","playCard","state","player1","shift","player2turn","prevState","player2"],"mappings":"AACA,IAAIA,SAAS,GAAG,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CARD;;AASA,IAAIC,SAAS,GAAG,MAAM;AAClB,OAAKC,QAAL,CAAc;AAACC,IAAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,KAAnB;AAAX,GAAd,EADkB,CAElB;AACA;AACA;AACH,CALD;;AAMA,IAAIC,WAAW,GAAG,MAAM;AACpB;AACA;AACA;AACA,OAAKL,QAAL,CAAcM,SAAS,KAAK;AAACL,IAAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWK,OAAX,CAAmBH,KAAnB,GAA2BE;AAAtC,GAAL,CAAvB;AACH,CALD","sourcesContent":["\nlet startGame = () => {\n    // let choice = prompt(\"Would you like to start the game?\")\n    // if(choice === 'yes'){\n    // this.choseCard()\n    // console.log(this.playCard)\n    // this.state.playCard = this.state.player2.filter(() => this.state.playCard)\n    // console.log(this.state.children)\n    return;\n}\nlet choseCard = () => {\n    this.setState({playCard: this.state.player1.shift()})\n    //I need to filter player2 array to find props.children[0]\n    //if it has that then push to this.state.playCard\n    //Player 3 sorts through array to find card etc....\n}\nlet player2turn = () => {\n    // this.setState({playCard: this.state.player2.filter((card,index ) => {\n    //     return index === this.state.playCard[0].props.children ? card : null\n    // })})\n    this.setState(prevState => ({playCard: this.state.player2.shift().prevState}))\n}"]},"metadata":{},"sourceType":"module"}